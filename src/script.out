# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def mm(A: T.Buffer[(640, 667), "float32"], B: T.Buffer[(667, 1152), "float32"], Y: T.Buffer[(640, 1152), "float32"]) -> None:
        # function attr dict
        T.func_attr({"global_symbol": "mm", "tir.noalias": True})
        # body
        # with T.block("root")
        Y_local = T.alloc_buffer([640, 1152], dtype="float32", scope="local")
        A_shared = T.alloc_buffer([667, 640], dtype="float32", scope="shared")
        B_shared = T.alloc_buffer([667, 1152], dtype="float32", scope="shared")
        A_local = T.alloc_buffer([640, 667], dtype="float32", scope="local")
        B_local = T.alloc_buffer([667, 1152], dtype="float32", scope="local")
        A_shared_local = T.alloc_buffer([640, 667], dtype="float32", scope="local")
        B_shared_local = T.alloc_buffer([667, 1152], dtype="float32", scope="local")
        for i1_0 in T.thread_binding(18, thread="blockIdx.y"):
            for i0_0 in T.thread_binding(16, thread="blockIdx.x"):
                for i1_1 in T.thread_binding(16, thread="threadIdx.y"):
                    for i0_1 in T.thread_binding(4, thread="threadIdx.x"):
                        for i0_2_init, i1_2_init in T.grid(10, 4):
                            with T.block("Y_init"):
                                i = T.axis.spatial(640, i0_0 * 40 + i0_1 * 10 + i0_2_init)
                                j = T.axis.spatial(1152, i1_0 * 64 + i1_1 * 4 + i1_2_init)
                                T.reads()
                                T.writes(Y_local[i, j])
                                Y_local[i, j] = T.float32(0)
                        for i2_0 in T.serial(667, annotations={"software_pipeline_order":[0, 3, 1, 4, 2], "software_pipeline_stage":[0, 0, 0, 0, 1]}):
                            for ax0_ax1_fused_0 in T.thread_binding(16, thread="threadIdx.y"):
                                for ax0_ax1_fused_1 in T.thread_binding(4, thread="threadIdx.x"):
                                    for ax0_ax1_fused_2 in T.vectorized(1):
                                        with T.block("A_local"):
                                            T.where(ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1 + ax0_ax1_fused_2 < 40)
                                            v0 = T.axis.spatial(640, i0_0 * 40 + (ax0_ax1_fused_2 + ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1))
                                            v1 = T.axis.spatial(667, i2_0)
                                            T.reads(A[v0, v1])
                                            T.writes(A_local[v0, v1])
                                            A_local[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused_0 in T.thread_binding(16, thread="threadIdx.y"):
                                for ax0_ax1_fused_1 in T.thread_binding(4, thread="threadIdx.x"):
                                    for ax0_ax1_fused_2 in T.vectorized(1):
                                        with T.block("A_shared"):
                                            T.where(ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1 + ax0_ax1_fused_2 < 40)
                                            v0 = T.axis.spatial(640, i0_0 * 40 + (ax0_ax1_fused_2 + ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1))
                                            v1 = T.axis.spatial(667, i2_0)
                                            T.reads(A_local[v0, v1])
                                            T.writes(A_shared[v1, v0 // 128 * 128 + v0 % 8 // 4 * 64 + v0 % 128 // 8 * 4 + v0 % 4])
                                            T.block_attr({"double_buffer_scope":0})
                                            A_shared[v1, v0 // 128 * 128 + v0 % 8 // 4 * 64 + v0 % 128 // 8 * 4 + v0 % 4] = A_local[v0, v1]
                            for ax0_ax1_fused_0 in T.thread_binding(16, thread="threadIdx.y"):
                                for ax0_ax1_fused_1 in T.thread_binding(4, thread="threadIdx.x"):
                                    for ax0_ax1_fused_2 in T.vectorized(1):
                                        with T.block("B_local"):
                                            v0 = T.axis.spatial(667, i2_0)
                                            v1 = T.axis.spatial(1152, ax0_ax1_fused_2 + i1_0 * 64 + ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1)
                                            T.reads(B[v0, v1])
                                            T.writes(B_local[v0, v1])
                                            B_local[v0, v1] = B[v0, v1]
                            for ax0_ax1_fused_0 in T.thread_binding(16, thread="threadIdx.y"):
                                for ax0_ax1_fused_1 in T.thread_binding(4, thread="threadIdx.x"):
                                    for ax0_ax1_fused_2 in T.vectorized(1):
                                        with T.block("B_shared"):
                                            v0 = T.axis.spatial(667, i2_0)
                                            v1 = T.axis.spatial(1152, ax0_ax1_fused_2 + i1_0 * 64 + ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1)
                                            T.reads(B_local[v0, v1])
                                            T.writes(B_shared[v0, v1 // 128 * 128 + v1 % 8 // 4 * 64 + v1 % 128 // 8 * 4 + v1 % 4])
                                            T.block_attr({"double_buffer_scope":0})
                                            B_shared[v0, v1 // 128 * 128 + v1 % 8 // 4 * 64 + v1 % 128 // 8 * 4 + v1 % 4] = B_local[v0, v1]
                            for i2_1 in T.unroll(1):
                                for ax0_ax1_fused_0 in T.unroll(3):
                                    for ax0_ax1_fused_1 in T.vectorized(4):
                                        with T.block("A_shared_local"):
                                            T.where(ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1 < 10)
                                            v0 = T.axis.spatial(640, i0_0 * 40 + i0_1 * 10 + (ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1))
                                            v1 = T.axis.spatial(667, i2_0)
                                            T.reads(A_shared[v1, v0 // 128 * 128 + v0 % 8 // 4 * 64 + v0 % 128 // 8 * 4 + v0 % 4])
                                            T.writes(A_shared_local[v0, v1])
                                            A_shared_local[v0, v1] = A_shared[v1, v0 // 128 * 128 + v0 % 8 // 4 * 64 + v0 % 128 // 8 * 4 + v0 % 4]
                                for ax0_ax1_fused_0 in T.unroll(1):
                                    for ax0_ax1_fused_1 in T.vectorized(4):
                                        with T.block("B_shared_local"):
                                            v0 = T.axis.spatial(667, i2_0)
                                            v1 = T.axis.spatial(1152, i1_0 * 64 + i1_1 * 4 + ax0_ax1_fused_0 * 4 + ax0_ax1_fused_1)
                                            T.reads(B_shared[v0, v1 // 128 * 128 + v1 % 8 // 4 * 64 + v1 % 128 // 8 * 4 + v1 % 4])
                                            T.writes(B_shared_local[v0, v1])
                                            B_shared_local[v0, v1] = B_shared[v0, v1 // 128 * 128 + v1 % 8 // 4 * 64 + v1 % 128 // 8 * 4 + v1 % 4]
                                for i0_2, i1_2 in T.grid(10, 4):
                                    with T.block("Y_update"):
                                        i = T.axis.spatial(640, i0_0 * 40 + i0_1 * 10 + i0_2)
                                        j = T.axis.spatial(1152, i1_0 * 64 + i1_1 * 4 + i1_2)
                                        k = T.axis.reduce(667, i2_1 + i2_0)
                                        T.reads(Y_local[i, j], A_shared_local[i, k], B_shared_local[k, j])
                                        T.writes(Y_local[i, j])
                                        Y_local[i, j] = Y_local[i, j] + A_shared_local[i, k] * B_shared_local[k, j]
                        for ax0 in T.serial(10):
                            for ax1 in T.vectorized(4):
                                with T.block("Y_local"):
                                    v0 = T.axis.spatial(640, i0_0 * 40 + i0_1 * 10 + ax0)
                                    v1 = T.axis.spatial(1152, i1_0 * 64 + i1_1 * 4 + ax1)
                                    T.reads(Y_local[v0, v1])
                                    T.writes(Y[v0, v1])
                                    Y[v0, v1] = Y_local[v0, v1]
    

