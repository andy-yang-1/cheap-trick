import tvm
from tvm.ir.module import IRModule
from tvm.script import tir as T, relax as R
from tvm import relax
import numpy as np
from tvm import te
from __future__ import annotations 


A = te.placeholder((1024,1024),"float32",name="A")
B = te.placeholder((1024,1024),"float32",name="B")
k = te.reduce_axis((0,1024),name="k")
Y = te.compute((1024,1024), lambda i , j: te.sum(A[i,k]*B[k,j],axis=k),name="Y")
sgemm_func = te.create_prim_func([A,B,Y]).with_attr({"global_symbol":"mm"})
myModule = tvm.IRModule({"mm":sgemm_func})
sch = tvm.tir.Schedule(myModule)
sch.work_on("mm")
b0 = sch.get_block(name="Y", func_name="mm")
b1 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
b2 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared")
b3 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared")
b4 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="local")
b5 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="local")
sch.transform_layout(block=b3, buffer=("write", 0), index_map=lambda i, j: (j, i, ))
l6, l7, l8 = sch.get_loops(block=b0)
l9, l10, l11 = sch.split(loop=l6, factors=[8, 16, 8], preserve_unit_iters=True)
l12, l13, l14 = sch.split(loop=l7, factors=[8, 16, 8], preserve_unit_iters=True)
l15, l16 = sch.split(loop=l8, factors=[128, 8], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="blockIdx.x")
sch.bind(loop=l12, thread_axis="blockIdx.y")
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.bind(loop=l13, thread_axis="threadIdx.y")
sch.reorder(l12, l9, l13, l10, l15, l16, l11, l14)
l17, l18, l19, l20, l21, l22, l23, l24 = sch.get_loops(block=b0)
b25 = sch.decompose_reduction(block=b0, loop=l21)
sch.compute_at(block=b4, loop=l22, preserve_unit_loops=False)
sch.compute_at(block=b5, loop=l22, preserve_unit_loops=False)
sch.compute_at(block=b3, loop=l21, preserve_unit_loops=False)
sch.compute_at(block=b2, loop=l21, preserve_unit_loops=False)
sch.reverse_compute_at(block=b1, loop=l20, preserve_unit_loops=False)
l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b3)
l33, l34, l35, l36, l37, l38, l39 = sch.get_loops(block=b3)
l40 = sch.fuse(l31, l39, preserve_unit_iters=True)
l41, l42, l43 = sch.split(loop=l40, factors=[16, 16, 4], preserve_unit_iters=True)
sch.bind(loop=l41, thread_axis="threadIdx.y")
sch.bind(loop=l42, thread_axis="threadIdx.x")
l44, l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b2)
l51, l52, l53, l54, l55, l56, l57 = sch.get_loops(block=b2)
l58 = sch.fuse(l49, l57, preserve_unit_iters=True)
l59, l60, l61 = sch.split(loop=l58, factors=[16, 16, 4], preserve_unit_iters=True)
sch.bind(loop=l59, thread_axis="threadIdx.y")
sch.bind(loop=l60, thread_axis="threadIdx.x")
l62, l63, l64, l65, l66, l67, l68 = sch.get_loops(block=b5)
l69, l70 = sch.split(loop=l68, factors=[2, 4], preserve_unit_iters=True)
l71, l72, l73, l74, l75, l76, l77 = sch.get_loops(block=b4)
l78, l79 = sch.split(loop=l77, factors=[2, 4], preserve_unit_iters=True)
sch.transform_layout(block=b4, buffer=("read", 0), index_map=lambda i, j: (i, ((((floordiv(j, 128)*128) + (floordiv(floormod(j, 128), 8)*4)) + (floordiv(floormod(j, 8), 4)*64)) + floormod(j, 4)), ))
sch.transform_layout(block=b5, buffer=("read", 0), index_map=lambda j, i: (j, ((((floordiv(i, 128)*128) + (floordiv(floormod(i, 128), 8)*4)) + (floordiv(floormod(i, 8), 4)*64)) + floormod(i, 4)), ))
l80, l81, l82, l83, l84, l85, l86, l87 = sch.get_loops(block=b3)
sch.unroll(loop=l87)
l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b2)
sch.unroll(loop=l95)
l96, l97, l98, l99, l100, l101, l102, l103 = sch.get_loops(block=b5)
l104, l105, l106, l107, l108, l109, l110, l111 = sch.get_loops(block=b5)
sch.unroll(loop=l103)
sch.unroll(loop=l110)
l112, l113, l114, l115, l116, l117, l118, l119 = sch.get_loops(block=b4)
l120, l121, l122, l123, l124, l125, l126, l127 = sch.get_loops(block=b4)
sch.unroll(loop=l119)
sch.unroll(loop=l126)
b128 = sch.get_block(name="Y_local", func_name="mm")
l129, l130, l131, l132, l133, l134 = sch.get_loops(block=b128)
b135 = sch.get_block(name="Y_local", func_name="mm")
l136, l137, l138, l139, l140, l141 = sch.get_loops(block=b135)
sch.unroll(loop=l134)
sch.unroll(loop=l140)
b142 = sch.get_block(name="Y_update", func_name="mm")
l143, l144, l145, l146, l147, l148, l149, l150 = sch.get_loops(block=b142)
b151 = sch.get_block(name="Y_update", func_name="mm")
l152, l153, l154, l155, l156, l157, l158, l159 = sch.get_loops(block=b151)
sch.unroll(loop=l150)
sch.unroll(loop=l158)
b160 = sch.get_block(name="Y_init", func_name="mm")
l161, l162, l163, l164, l165, l166 = sch.get_loops(block=b160)
b167 = sch.get_block(name="Y_init", func_name="mm")
l168, l169, l170, l171, l172, l173 = sch.get_loops(block=b167)
sch.unroll(loop=l166)
sch.unroll(loop=l172)
l174, l175, l176, l177, l178, l179, l180, l181 = sch.get_loops(block=b3)
sch.vectorize(loop=l181)
l182, l183, l184, l185, l186, l187, l188, l189 = sch.get_loops(block=b2)
sch.vectorize(loop=l189)
l190, l191, l192, l193, l194, l195, l196, l197 = sch.get_loops(block=b5)
sch.vectorize(loop=l197)
l198, l199, l200, l201, l202, l203, l204, l205 = sch.get_loops(block=b4)
sch.vectorize(loop=l205)
b206 = sch.get_block(name="Y_local", func_name="mm")
l207, l208, l209, l210, l211, l212 = sch.get_loops(block=b206)
sch.vectorize(loop=l212)
l213, l214, l215, l216, l217, l218, l219, l220 = sch.get_loops(block=b3)
sch.annotate(block_or_loop=l217, ann_key="software_pipeline_stage", ann_val=[0, 0, 1])
sch.annotate(block_or_loop=l217, ann_key="software_pipeline_order", ann_val=[0, 1, 2])